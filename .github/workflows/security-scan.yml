name: Security Scanning Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security scans every Sunday at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:  # Allow manual triggers

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  container-security-scan:
    name: Container Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Find all Docker Compose files
        id: find-compose
        run: |
          echo "Finding Docker Compose files..."
          COMPOSE_FILES=$(find . -name "docker-compose.yml" -o -name "docker-compose.yaml" | sort)
          echo "$COMPOSE_FILES"
          echo "compose_files<<EOF" >> $GITHUB_OUTPUT
          echo "$COMPOSE_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Extract container images
        id: extract-images
        run: |
          echo "Extracting container images from Docker Compose files..."
          IMAGES=""

          for compose_file in $(find . -name "docker-compose.yml" -o -name "docker-compose.yaml"); do
            echo "Processing: $compose_file"

            # Extract image names using grep and sed
            file_images=$(grep -E "^\s*image:" "$compose_file" | sed 's/.*image://g' | tr -d ' "' | sort -u || true)

            if [ -n "$file_images" ]; then
              IMAGES="$IMAGES"$'\n'"$file_images"
            fi
          done

          # Remove duplicates and empty lines
          UNIQUE_IMAGES=$(echo "$IMAGES" | sort -u | grep -v '^$' || true)

          echo "Found images:"
          echo "$UNIQUE_IMAGES"

          echo "images<<EOF" >> $GITHUB_OUTPUT
          echo "$UNIQUE_IMAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Install Trivy
        run: |
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sudo sh -s -- -b /usr/local/bin

      - name: Scan container images with Trivy
        run: |
          mkdir -p security-reports/trivy

          echo "${{ steps.extract-images.outputs.images }}" | while IFS= read -r image; do
            if [ -z "$image" ]; then
              continue
            fi

            echo "Scanning $image with Trivy..."

            # Clean image name for filename
            safe_name=$(echo "$image" | tr '/:' '_')

            # Scan with Trivy (JSON format)
            trivy image \
              --severity HIGH,CRITICAL \
              --format json \
              --output "security-reports/trivy/${safe_name}.json" \
              "$image" || echo "Warning: Trivy scan failed for $image"

            # Scan with Trivy (Table format for readability)
            trivy image \
              --severity HIGH,CRITICAL \
              --format table \
              "$image" > "security-reports/trivy/${safe_name}.txt" || echo "Warning: Trivy scan failed for $image"
          done

      - name: Scan container images with Grype
        run: |
          mkdir -p security-reports/grype

          echo "${{ steps.extract-images.outputs.images }}" | while IFS= read -r image; do
            if [ -z "$image" ]; then
              continue
            fi

            echo "Scanning $image with Grype..."

            # Clean image name for filename
            safe_name=$(echo "$image" | tr '/:' '_')

            # Scan with Grype (JSON format)
            grype "$image" \
              -o json \
              --file "security-reports/grype/${safe_name}.json" || echo "Warning: Grype scan failed for $image"

            # Scan with Grype (Table format)
            grype "$image" \
              -o table > "security-reports/grype/${safe_name}.txt" || echo "Warning: Grype scan failed for $image"
          done

      - name: Generate security summary
        run: |
          echo "# 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count total images scanned
          TOTAL_IMAGES=$(echo "${{ steps.extract-images.outputs.images }}" | grep -v '^$' | wc -l)
          echo "**Total Images Scanned**: $TOTAL_IMAGES" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Trivy Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          for report in security-reports/trivy/*.txt; do
            if [ -f "$report" ]; then
              image_name=$(basename "$report" .txt | tr '_' '/')
              echo "### 📦 $image_name" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              head -n 30 "$report" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "📊 Full reports available in workflow artifacts" >> $GITHUB_STEP_SUMMARY

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports
          path: security-reports/
          retention-days: 90

      - name: Check for critical vulnerabilities
        run: |
          CRITICAL_FOUND=false

          for json_file in security-reports/trivy/*.json; do
            if [ -f "$json_file" ]; then
              # Count critical vulnerabilities
              CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' "$json_file" 2>/dev/null || echo "0")

              if [ "$CRITICAL_COUNT" -gt 0 ]; then
                echo "⚠️ Found $CRITICAL_COUNT critical vulnerabilities in $(basename $json_file)"
                CRITICAL_FOUND=true
              fi
            fi
          done

          if [ "$CRITICAL_FOUND" = true ]; then
            echo "::warning::Critical vulnerabilities detected. Please review security reports."
            # Uncomment to fail the build on critical vulnerabilities:
            # exit 1
          else
            echo "✅ No critical vulnerabilities found!"
          fi

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for secret scanning

      - name: Install TruffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sudo sh -s -- -b /usr/local/bin

      - name: Scan for secrets
        run: |
          mkdir -p security-reports/secrets

          echo "Scanning repository for secrets..."
          trufflehog filesystem . \
            --json \
            --no-update \
            > security-reports/secrets/trufflehog.json || true

          # Generate readable report
          if [ -s security-reports/secrets/trufflehog.json ]; then
            echo "⚠️ Potential secrets found!" > security-reports/secrets/summary.txt
            jq -r '.DetectorName' security-reports/secrets/trufflehog.json | sort | uniq -c >> security-reports/secrets/summary.txt
          else
            echo "✅ No secrets detected" > security-reports/secrets/summary.txt
          fi

      - name: Check for secrets
        run: |
          if [ -s security-reports/secrets/trufflehog.json ]; then
            SECRET_COUNT=$(wc -l < security-reports/secrets/trufflehog.json)
            echo "::warning::Found $SECRET_COUNT potential secrets in the repository!"
            echo "# ⚠️ Secret Scanning Alert" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Found $SECRET_COUNT potential secrets. Please review the security reports." >> $GITHUB_STEP_SUMMARY

            # Uncomment to fail on secrets:
            # exit 1
          else
            echo "✅ No secrets detected"
            echo "# ✅ Secret Scanning Passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No secrets detected in the repository." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload secret scan reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-reports
          path: security-reports/secrets/
          retention-days: 90

  docker-compose-validation:
    name: Docker Compose Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate all Docker Compose files
        run: |
          echo "Validating Docker Compose files..."
          EXIT_CODE=0

          for compose_file in $(find . -name "docker-compose.yml" -o -name "docker-compose.yaml"); do
            echo "Validating: $compose_file"

            if docker-compose -f "$compose_file" config > /dev/null 2>&1; then
              echo "✅ Valid: $compose_file"
            else
              echo "❌ Invalid: $compose_file"
              docker-compose -f "$compose_file" config 2>&1 || true
              EXIT_CODE=1
            fi
          done

          if [ $EXIT_CODE -eq 0 ]; then
            echo "# ✅ All Docker Compose files are valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "# ❌ Some Docker Compose files have validation errors" >> $GITHUB_STEP_SUMMARY
          fi

          exit $EXIT_CODE
